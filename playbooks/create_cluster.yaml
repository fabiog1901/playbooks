---
##############
#   INFRA    #
##############
- name: PROVISION VMS
  hosts: localhost
  connection: local
  gather_facts: no
  become: no
  tags:
    - infra
    - cloud_instance
  tasks:
    - name: Ensure presence of instances
      shell: |
        cloud_instance create \
          -d {{ deployment_id }} \
          --deployment '{{ deployment | to_json }}' \
          --defaults '{{ defaults | to_json }}'
      vars:
        defaults:
          aws:
            "2":
              default: t3.large # m6i.large
              "4": c5.large
              "8": m6i.large
              "16": r5.large
            "4":
              default: t3.xlarge #m6i.xlarge
              "8": c5.xlarge
              "16": m6i.xlarge
              "32": r5.xlarge
            "8":
              default: m6i.2xlarge
              "16": c5.2xlarge
              "32": m6i.2xlarge
              "64": r5.2xlarge
            "16":
              default: m6i.4xlarge
              "32": c5.4xlarge
              "64": m6i.4xlarge
              "128": r5.4xlarge
            "32":
              default: m6i.8xlarge
              "128": m6i.8xlarge
              "256": r5.8xlarge
          azure:
            "2":
              "4": Standard_F2s_v2
              "8": Standard_D2s_v3
              "16": Standard_E2s_v3
              default: Standard_D2s_v3
            "4":
              "8": Standard_F4s_v2
              "16": Standard_D4s_v3
              "32": Standard_E4s_v3
              default: Standard_D4s_v3
            "8":
              "16": Standard_F8s_v2
              "32": Standard_D8s_v3
              "64": Standard_E8s_v3
              default: Standard_D8s_v3
            "16":
              "32": Standard_F16s_v2
              "64": Standard_D16s_v3
              "128": Standard_E16s_v3
              default: Standard_D16s_v3
            "32":
              "64": Standard_F32s_v2
              "128": Standard_D32s_v3
              "256": Standard_E32s_v3
              default: Standard_D32s_v3
          gcp:
            "2":
              default: e2-medium #n2-standard-2
              "4": n2-standard-2
              "8": n2-standard-2
              "16": n2-highmem-2
            "4":
              default: e2-medium #n2-standard-4
              "8": n2-standard-4
              "16": n2-standard-4
              "32": n2-highmem-4
            "8":
              default: n2-standard-8
              "16": n2-standard-8
              "32": n2-standard-8
              "64": n2-highmem-8
            "16":
              default: n2-standard-16
              "32": n2-standard-16
              "64": n2-standard-16
              "128": n2-highmem-16
            "32":
              default: n2-standard-32
              "64": n2-standard-32
              "128": n2-standard-32
              "256": n2-highmem-32
      register: instances

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        timeout: 180
        sleep: 5
        state: started
      loop: "{{ instances.stdout | from_json }}"

    - name: Build ansible inventory dynamically
      add_host:
        # id
        name: "{{ item.public_ip }}"
        id: "{{ item.id }}"

        # locality
        cloud: "{{ item.cloud }}"
        region: "{{ item.region }}"
        zone: "{{ item.zone }}"

        # addresses
        public_hostname: "{{ item.public_hostname }}"
        public_ip: "{{ item.public_ip }}"
        private_hostname: "{{ item.private_hostname }}"
        private_ip: "{{ item.private_ip }}"

        # tags
        ansible_user: "{{ item.ansible_user }}"
        ansible_host: "{{ item.public_ip }}"
        groups: "{{ item.inventory_groups }}"
        cluster_name: "{{ item.cluster_name }}"
        group_name: "{{ item.group_name }}"
        extra_vars: "{{ item.extra_vars }}"
      loop: "{{ instances.stdout | from_json }}"

    - name: save cluster list of hosts
      copy:
        content: |
          {% for item in groups %}
          {% if item not in ['all', 'ungrouped'] %}
          [{{item}}]
          {% for entry in groups[item] %}
          {{ entry }} ansible_host={{ hostvars[entry].ansible_host }} cloud={{ hostvars[entry].cloud }} cluster_name={{ hostvars[entry].cluster_name }}  group_name={{ hostvars[entry].group_name }} id={{ hostvars[entry].id }} region={{ hostvars[entry].region }} zone={{ hostvars[entry].zone }} private_hostname={{ hostvars[entry].private_hostname }} private_ip={{ hostvars[entry].private_ip }} public_hostname={{ hostvars[entry].public_hostname }} public_ip={{ hostvars[entry].public_ip }} ansible_user={{ hostvars[entry].ansible_user }} extra_vars="{{ hostvars[entry].extra_vars }}" 
          {% endfor %} 

          {% endif %}
          {% endfor %}
        dest: "../inventories/{{ deployment_id }}.ini"

    - name: save simplified list of hosts
      copy:
        content: |
          {% for item in groups %}
          {% if item in ['haproxy', 'cockroachdb'] %}
          [{{item}}]
          {% for entry in groups[item] %}
          {{ hostvars[entry].cloud }}   {{ "{:18}".format(hostvars[entry].region) }} {{ hostvars[entry].public_ip }}
          {% endfor %}

          {% endif %}
          {% endfor %}
        dest: "../inventories/{{ deployment_id }}.simple.ini"

##############
#  PLATFORM  #
##############
- name: GENERATE COCKROACHDB CERTS
  hosts: localhost
  gather_facts: yes
  become: no
  vars:
    certificates_organization_name: fabio-org
    certificates_dir: certs
    certificates_usernames:
      - root
    certificates_hosts: "{{ groups['cockroachdb'] }}"
    certificates_loadbalancer: "{{ groups['haproxy'] | default('') }}"
  tags:
    - platform
    - certificates
  tasks:
    - name: Recreate certificate directory
      shell: |
        rm -rf "{{ certificates_dir }}"
        mkdir "{{ certificates_dir }}"
        chmod 0755 "{{ certificates_dir }}"

    # Step 2. Create the certificate and key pairs for nodes
    - name: Create the cnf file
      copy:
        content: |
          # OpenSSL node configuration file
          [ req ]
          prompt=no
          distinguished_name = distinguished_name
          req_extensions = extensions

          [ distinguished_name ]
          organizationName = {{ certificates_organization_name }}

          [ extensions ]
          subjectAltName = critical, @san

          [ san ]
          DNS.1 = localhost
          DNS.2 = node
          DNS.3 = {{ hostvars[item].private_hostname.split('.')[0] }}
          DNS.4 = {{ hostvars[item].private_hostname }}
          DNS.5 = {{ hostvars[item].public_hostname }}
          IP.1 = 127.0.0.1
          IP.2 = {{ hostvars[item].private_ip }}
          IP.3 = {{ hostvars[item].public_ip }}

          {% for lb in certificates_loadbalancer %}
          DNS.{{ loop.index + 5 }} = {{ hostvars[lb].private_hostname.split('.')[0] }}
          DNS.{{ loop.index + 6 }} = {{ hostvars[lb].private_hostname }}
          DNS.{{ loop.index + 7 }} = {{ hostvars[lb].public_hostname }}
          IP.{{ loop.index + 3 }} = {{ hostvars[lb].private_ip }}
          IP.{{ loop.index + 4 }} = {{ hostvars[lb].public_ip }}
          {% endfor %}
        dest: "{{ certificates_dir }}/node.{{ item }}.cnf"
      loop: "{{ certificates_hosts }}"

    - name: Create node key
      shell: |
        openssl genrsa \
          -out {{ certificates_dir }}/node.{{ item }}.key 2048

        chmod 400 {{ certificates_dir }}/node.{{ item }}.key
      loop: "{{ certificates_hosts }}"

    - name: Create node csr
      shell: |
        openssl req \
          -new \
          -config {{ certificates_dir }}/node.{{ item }}.cnf \
          -key {{ certificates_dir }}/node.{{ item }}.key \
          -out {{ certificates_dir }}/node.{{ item }}.csr \
          -batch
      loop: "{{ certificates_hosts }}"

    - name: Sign node csr with CA key and crt
      shell: |
        openssl ca \
          -config  /var/lib/ca/ca.cnf \
          -keyfile /var/lib/ca/ca.key \
          -cert    /var/lib/ca/ca.crt \
          -policy signing_policy \
          -extensions signing_node_req \
          -out {{ certificates_dir }}/node.{{ item }}.crt \
          -outdir {{ certificates_dir }}/ \
          -in {{ certificates_dir }}/node.{{ item }}.csr \
          -batch
      loop: "{{ certificates_hosts }}"

    # Step 3. Create the certificate and key pair for the root user
    - name: Create client.cnf for each username
      copy:
        content: |
          [ req ]
          prompt=no
          distinguished_name = distinguished_name
          req_extensions = extensions

          [ distinguished_name ]
          organizationName = {{ certificates_organization_name }}
          commonName = {{ item }}

          [ extensions ]
          subjectAltName = DNS:{{ item }}
        dest: "{{ certificates_dir }}/client.{{ item }}.cnf"
      loop: "{{ certificates_usernames }}"

    - name: Create client key pair for each username
      shell: |
        openssl genrsa \
          -out {{ certificates_dir }}/client.{{ item }}.key 2048

        chmod 400 {{ certificates_dir }}/client.{{ item }}.key
      loop: "{{ certificates_usernames }}"

    - name: Create client csr
      shell: |
        openssl req \
          -new \
          -config {{ certificates_dir }}/client.{{ item }}.cnf \
          -key {{ certificates_dir }}/client.{{ item }}.key \
          -out {{ certificates_dir }}/client.{{ item }}.csr \
          -batch
      loop: "{{ certificates_usernames }}"

    - name: Sign client csr with CA crt and key
      shell: |
        openssl ca \
          -config  /var/lib/ca/ca.cnf \
          -keyfile /var/lib/ca/ca.key \
          -cert    /var/lib/ca/ca.crt \
          -policy signing_policy \
          -extensions signing_client_req \
          -out {{ certificates_dir }}/client.{{ item }}.crt \
          -outdir {{ certificates_dir }}/ \
          -in {{ certificates_dir }}/client.{{ item }}.csr \
          -batch
      loop: "{{ certificates_usernames }}"

- name: CONFIGURE OS
  hosts: cockroachdb
  gather_facts: yes
  become: yes
  tags:
    - platform
    - config_os
  tasks:
    - name: Set debian facts
      when: ansible_facts.os_family | lower == 'debian'
      set_fact:
        ntp_deamon: chrony
        ntp_conf: "/etc/chrony/chrony.conf"

    - name: Set redhat facts
      when: ansible_facts.os_family | lower == 'redhat'
      set_fact:
        ntp_deamon: chronyd
        ntp_conf: "/etc/chrony.conf"

    - name: Set NTP servers for AWS
      when: cloud == 'aws'
      set_fact:
        ntp_server: "server 169.254.169.123 prefer iburst minpoll 4 maxpoll 4"

    - name: Set NTP servers for GCP
      when: cloud == 'gcp'
      set_fact:
        ntp_server: server metadata.google.internal iburst

    - name: Set NTP servers for Azure
      when: cloud == 'azure'
      set_fact:
        ntp_server: |
          server time1.google.com iburst
          server time2.google.com iburst
          server time3.google.com iburst
          server time4.google.com iburst

    - name: Azure only - disable refclock
      when: cloud == 'azure'
      shell: |
        curl -O https://raw.githubusercontent.com/torvalds/linux/master/tools/hv/lsvmbus
        DEVICE_ID=`python3 lsvmbus -vv | grep -w "Time Synchronization" -A 1 | awk -F'[{}]' '{print $2}' | tail -n1`
        echo $DEVICE_ID | sudo tee /sys/bus/vmbus/drivers/hv_utils/unbind

    - name: add only the NTP servers to the chrony.conf file
      shell: sed -i '/^pool.*/d' {{ ntp_conf }}
        sed -i '/^server.*/d' {{ ntp_conf }}
        sed -i '/^refclock.*/d' {{ ntp_conf }}

        echo "{{ ntp_server }}" >> {{ ntp_conf }}

    - name: restart chrony
      shell: |
        systemctl restart {{ ntp_deamon }}

    - name: Update VM swappiness
      shell: |
        sed -i '/vm.swappiness*/d' /etc/sysctl.conf
        echo 'vm.swappiness = 0' >> /etc/sysctl.conf
        sysctl -p

        swapoff -a
        sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab

    - name: Set timezone to UTC
      shell: |
        timedatectl set-timezone UTC

    - name: Find attached disks bigger than 100GB
      shell: |
        lsblk -o NAME,TYPE,SIZE -p -n -b -s | \
          awk '$NF ~ /[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]/' | \
          grep -v '└─' | \
          grep disk | \
          awk '{print $1}'
      args:
        executable: /bin/bash
      register: _disks

    - name: Create a ext4 filesystem
      when: _disks.stdout_lines | length > 0
      shell: |
        blkid {{ item }} -t TYPE="ext4" || mkfs.ext4 {{ item }}
      loop: "{{ _disks.stdout_lines }}"

- name: DEPLOY COCKROACHDB
  hosts: cockroachdb
  gather_facts: yes
  become: yes
  vars:
    # cockroachdb_version: latest
    cockroachdb_secure: yes
    cockroachdb_certificates_dir: certs
    cockroachdb_certificates_clients:
      - root
    cockroachdb_sql_port: 26257
    cockroachdb_http_addr_ip: "0.0.0.0"
    cockroachdb_http_addr_port: 8080
    # cockroachdb_store:
    #   - /mnt/cockroach
    cockroachdb_secure_flag: --certs-dir=/var/lib/cockroach/certs
    cockroachdb_insecure_flag: --insecure
    cockroachdb_repo_url: https://binaries.cockroachdb.com
    cockroachdb_locality: "cloud={{ cloud | default('') }},region={{ region | default('') }},zone={{ zone | default('') }}"
    cockroachdb_advertise_addr: "{{ public_ip | default('') }}"
    cockroachdb_listen_addr: "0.0.0.0"
    cockroachdb_attrs: std
    cockroachdb_cache: ".35"
    cockroachdb_max_sql_memory: ".35"
    cockroachdb_env_vars: []
    cockroachdb_rpc_port: 26357
    cockroachdb_max_offset: 250ms
  tags:
    - platform
    - cockroachdb
  tasks:
    - name: Create the binary-type map
      set_fact:
        # map the machine CPU type to the matching filename component
        bin_arch:
          aarch64: arm64
          x86_64: amd64

    - name: Check that the CockroachDB tarball exists locally
      stat:
        path: cockroach-{{ cockroachdb_version }}.linux-{{ bin_arch[ansible_architecture] }}.tgz
      register: _stat_result

    - name: Download CockroachDB binary
      shell: |
        wget -q {{ cockroachdb_repo_url }}/cockroach-{{ cockroachdb_version }}.linux-{{ bin_arch[ansible_architecture] }}.tgz
      when: not _stat_result.stat.exists

    - name: Install CockroachDB binary
      shell: |
        tar xvf cockroach-{{ cockroachdb_version }}.linux-{{ bin_arch[ansible_architecture] }}.tgz
        mv cockroach-{{ cockroachdb_version }}.linux-{{ bin_arch[ansible_architecture] }}/cockroach /usr/local/bin/cockroach
        chmod 755 /usr/local/bin/cockroach
        mkdir /usr/local/lib/cockroach/
        mv cockroach-{{ cockroachdb_version }}.linux-{{ bin_arch[ansible_architecture] }}/lib/libgeos*.so /usr/local/lib/cockroach/
        rm -rf cockroach-{{ cockroachdb_version }}.linux-{{ bin_arch[ansible_architecture] }}

    - name: Add the user cockroach
      shell: |
        id cockroach || useradd -s /bin/bash cockroach

    - name: Create CockroachDB store directory
      shell: |
        mkdir -p {{ item }}
        chmod 755 {{ item }}
        chown cockroach:cockroach {{ item }}
      loop:
        - /var/lib/cockroach
        - /mnt/cockroach

    - name: Create certs directory if it does not exist
      when: cockroachdb_secure
      shell: |
        mkdir -p /var/lib/cockroach/certs
        chmod 755 /var/lib/cockroach/certs 
        chown cockroach:cockroach /var/lib/cockroach/certs

    - name: Copy CA certificate
      when: cockroachdb_secure
      copy:
        src: /var/lib/ca/ca.crt
        dest: /var/lib/cockroach/certs/ca.crt

    - name: Copy node certificate
      when: cockroachdb_secure
      copy:
        src: "{{ cockroachdb_certificates_dir }}/node.{{ inventory_hostname }}.crt"
        dest: /var/lib/cockroach/certs/node.crt

    - name: Copy node key
      when: cockroachdb_secure
      copy:
        src: "{{ cockroachdb_certificates_dir }}/node.{{ inventory_hostname }}.key"
        dest: /var/lib/cockroach/certs/node.key
        owner: cockroach
        group: cockroach
        mode: "0400"

    - name: Copy client certificates crt
      when: cockroachdb_secure
      copy:
        src: "{{ cockroachdb_certificates_dir }}/client.{{ item }}.crt"
        dest: /var/lib/cockroach/certs
        mode: "0400"
      loop: "{{ cockroachdb_certificates_clients }}"

    - name: Copy client certificates key
      when: cockroachdb_secure
      copy:
        src: "{{ cockroachdb_certificates_dir }}/client.{{ item }}.key"
        dest: /var/lib/cockroach/certs
        mode: "0400"
      loop: "{{ cockroachdb_certificates_clients }}"

    - name: Find attached disks
      shell: |
        lsblk -o NAME,TYPE,SIZE -p -n -b -s | \
          awk '$NF ~ /[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]/' | \
          grep -v '└─' | \
          grep disk | \
          awk '{print $1}'
      args:
        executable: /bin/bash
      register: _disks

    - name: Create CockroachDB store directories
      when: _disks.stdout_lines | length > 0
      shell: |
        mkdir -p /mnt/cockroach{{ idx }}
        chmod 755 /mnt/cockroach{{ idx }}
        chown cockroach:cockroach /mnt/cockroach{{ idx }}
      loop: "{{ _disks.stdout_lines }}"
      loop_control:
        index_var: idx

    - name: Mount the disks
      when: _disks.stdout_lines | length > 0
      shell: |
        DISKUUID=`lsblk -no UUID {{ item }}`
        grep -q $DISKUUID /etc/fstab || echo "UUID=$DISKUUID /mnt/cockroach{{ idx }} ext4 defaults 0 2" >> /etc/fstab
        systemctl daemon-reload
        mount -a
      loop: "{{ _disks.stdout_lines }}"
      loop_control:
        index_var: idx

    - name: Reset permissions on mounted directory /mnt/cockroach
      when: _disks.stdout_lines | length > 0
      shell: |
        chmod 755 /mnt/cockroach{{ idx }}
        chown cockroach:cockroach /mnt/cockroach{{ idx }}
      loop: "{{ _disks.stdout_lines }}"
      loop_control:
        index_var: idx

    - name: Reset cockroachdb_store
      when: _disks.stdout_lines | length > 0
      set_fact:
        cockroachdb_store: []

    - name: Set cockroachdb_store
      when: _disks.stdout_lines | length > 0
      set_fact:
        cockroachdb_store: "{{ cockroachdb_store + ['/mnt/cockroach' + idx|string] }}"
      loop: "{{ _disks.stdout_lines }}"
      loop_control:
        index_var: idx

    - name: Group hosts dynamically based on region
      group_by:
        key: "crdbregion_{{ region }}"

    - name: Copy systemd template cockroachdb.service
      copy:
        content: |
          [Unit]
          Description=Cockroach Database cluster node
          Requires=network.target
          [Service]
          Type=notify
          WorkingDirectory=/var/lib/cockroach
          {% for v in cockroachdb_env_vars %}
          Environment="{{ v }}"
          {% endfor %}
          ExecStart=/usr/local/bin/cockroach start \
              {{ (cockroachdb_secure) | ternary(cockroachdb_secure_flag, cockroachdb_insecure_flag) }} \
              {% for store in cockroachdb_store %}
              --store={{ store }} \
              {% endfor %}
              --listen-addr={{ cockroachdb_listen_addr }}:{{ cockroachdb_rpc_port }} \
              --advertise-addr={{ cockroachdb_advertise_addr }}:{{ cockroachdb_rpc_port }} \
              --sql-addr=:{{ cockroachdb_sql_port }} \
              --cache={{ cockroachdb_cache }} \
              --max-sql-memory={{ cockroachdb_max_sql_memory }} \
              --http-addr={{ cockroachdb_http_addr_ip }}:{{ cockroachdb_http_addr_port }} \
              {% for g in groups %}
              {% if g.startswith("crdbregion_") %}
              {% for joinhost in (groups[g] | sort)[:3] %}
              --join={{ hostvars[joinhost].public_ip }}:{{ cockroachdb_rpc_port }} \
              {% endfor%}
              {% endif %}
              {% endfor %}
              --locality={{ cockroachdb_locality }} \
              --attrs={{ cockroachdb_attrs }} \
              --max-offset={{ cockroachdb_max_offset }}
          TimeoutStopSec=300
          LimitNOFILE=65000
          Restart=on-failure
          SuccessExitStatus=SIGKILL
          RestartSec=10
          StandardOutput=syslog
          StandardError=syslog
          SyslogIdentifier=cockroach
          User=cockroach
          [Install]
          WantedBy=default.target
        dest: /etc/systemd/system/cockroachdb.service
        mode: 0644
        owner: root
        group: root
        backup: yes
        force: yes

    - name: Ensure cockroachdb service is restarted
      shell: |
        systemctl daemon-reload
        systemctl enable cockroachdb
        systemctl restart cockroachdb

    - name: Find the first region host
      set_fact:
        init_host: >-
          {{
            groups
            | dict2items
            | selectattr('key', 'match', '^crdbregion_')
            | map(attribute='value')
            | flatten
            | sort
            | first
          }}
      run_once: yes

    - name: Init Cluster
      run_once: yes
      shell: |
        cockroach init \
          {{ (cockroachdb_secure) | ternary(cockroachdb_secure_flag, cockroachdb_insecure_flag) }} \
          --host={{ hostvars[init_host].public_ip }}:{{ cockroachdb_rpc_port }}
      register: result
      failed_when: result.rc != 0 and 'cluster has already been initialized' not in result.stderr and 'unable to bootstrap due to internal error' not in result.stderr

- name: DEPLOY COCKROACHDB-HAPROXY
  hosts: haproxy
  gather_facts: yes
  become: yes
  vars:
    haproxy_group: "{{ groups[cluster_name] | intersect(groups['cockroachdb']) }}"
    haproxy_port: "26257"
    haproxy_checkport: "8080"
    haproxy_serverprefix: cockroach
    # CRDB
    # cockroachdb_version: latest
    cockroachdb_repo_url: https://binaries.cockroachdb.com
  tags:
    - platform
    - haproxy
  tasks:
    - name: Install haproxy on debian
      when: ansible_facts.os_family | lower == 'debian'
      shell: |
        apt update
        apt install -y haproxy

    - name: Install haproxy on redhat
      when: ansible_facts.os_family | lower == 'redhat'
      shell: |
        dnf update -y
        dnf install -y haproxy

    - name: Copy haproxy.cfg
      copy:
        content: |
          global
            maxconn 4096

          defaults
              mode                tcp
              timeout connect     10s
              timeout client      10m
              timeout server      10m
              # TCP keep-alive on client side. Server already enables them.
              option              clitcpka

          listen psql
              bind :{{ haproxy_port }}
              mode tcp
              balance roundrobin
              option httpchk GET /health?ready=1

          {% for host in haproxy_group %}
          {% if hostvars[host].extra_vars.crdb_region | default(hostvars[host].region) == extra_vars.crdb_region | default(region) %}
              server {{ haproxy_serverprefix }}-{{ loop.index }} {{ hostvars[host].private_hostname }}:{{ haproxy_port }} check port {{ haproxy_checkport }}
          {% endif %}
          {% endfor %}

          listen http
              bind :{{ haproxy_checkport }}
              mode tcp
              balance roundrobin
              option httpchk GET /health?ready=1

          {% for host in haproxy_group %}
          {% if hostvars[host].extra_vars.crdb_region | default(hostvars[host].region) == extra_vars.crdb_region | default(region) %}
              server {{ haproxy_serverprefix }}-{{ loop.index }} {{ hostvars[host].private_hostname }}:{{ haproxy_checkport }} check port {{ haproxy_checkport }}
          {% endif %}
          {% endfor %}
        dest: /etc/haproxy/haproxy.cfg
        mode: 0644
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        backup: yes
        force: yes

    - name: Start haproxy
      shell: |
        systemctl restart haproxy

    - name: Create the binary-type map
      set_fact:
        # map the machine CPU type to the matching filename component
        bin_arch:
          aarch64: arm64
          x86_64: amd64

    - name: Check that the CockroachDB tarball exists locally
      stat:
        path: cockroach-{{ cockroachdb_version }}.linux-{{ bin_arch[ansible_architecture] }}.tgz
      register: _stat_result

    - name: Download CockroachDB binary
      shell: |
        wget -q {{ cockroachdb_repo_url }}/cockroach-{{ cockroachdb_version }}.linux-{{ bin_arch[ansible_architecture] }}.tgz
      when: not _stat_result.stat.exists

    - name: Install CockroachDB binary
      shell: |
        tar xvf cockroach-{{ cockroachdb_version }}.linux-{{ bin_arch[ansible_architecture] }}.tgz
        mv cockroach-{{ cockroachdb_version }}.linux-{{ bin_arch[ansible_architecture] }}/cockroach /usr/local/bin/cockroach
        chmod 755 /usr/local/bin/cockroach
        rm -rf cockroach-{{ cockroachdb_version }}.linux-{{ bin_arch[ansible_architecture] }}

- name: SET CLUSTER SETTINGS FOR COCKROACHDB
  hosts: cockroachdb
  gather_facts: no
  become: yes
  vars:
    cockroachdb_advertise_addr: "{{ public_ip | default('') }}"
  tags:
    - app
  tasks:
    - name: CockroachDB - set cluster.organization
      run_once: yes
      shell: |
        cockroach sql \
          --host={{ cockroachdb_advertise_addr }} \
          --certs-dir=/var/lib/cockroach/certs \
          -e "SET CLUSTER SETTING cluster.organization = '{{ cockroachdb_cluster_organization }}';"

    - name: CockroachDB - set enterprise.license
      run_once: yes
      shell: |
        cockroach sql \
          --host={{ cockroachdb_advertise_addr }} \
          --certs-dir=/var/lib/cockroach/certs \
          -e "SET CLUSTER SETTING enterprise.license = '{{ cockroachdb_enterprise_license }}';"

    - name: CockroachDB - create admin user
      run_once: yes
      shell: |
        cockroach sql \
          --host={{ cockroachdb_advertise_addr }} \
          --certs-dir=/var/lib/cockroach/certs \
          -e "CREATE USER {{ item.name }} WITH password {{ "'" + item.password + "'" }};"
      loop: "{{ dbusers }}"
      failed_when: result.rc != 0 and 'already exists' not in result.stderr
      register: result

    - name: CockroachDB - grant admin to user
      run_once: yes
      shell: |
        cockroach sql \
          --host={{ cockroachdb_advertise_addr }} \
          --certs-dir=/var/lib/cockroach/certs \
          -e "GRANT admin TO {{ item.name }};"
      loop: "{{ dbusers }}"
      when: item.is_admin

- name: GET DATA FROM COCKROACHDB CLUSTER
  hosts: localhost
  gather_facts: no
  become: no
  tasks:
    - name: Collect cloud, region and public_ip for cockroachdb servers
      set_fact:
        cockroachdb: >-
          {{
            groups['cockroachdb']
            | map('extract', hostvars) 
            | map('dict2items')                  
            | map('selectattr', 'key', 'in', ['ansible_host', 'cloud', 'region', 'public_ip'])
            | map('items2dict')    | list              
          }}

    - name: Collect cloud, region and public_ip for haproxy servers
      set_fact:
        haproxy: >-
          {{
            groups['haproxy']
            | map('extract', hostvars) 
            | map('dict2items')                  
            | map('selectattr', 'key', 'in', ['ansible_host', 'cloud', 'region', 'public_ip'])
            | map('items2dict')    | list              
          }}

    - name: Data
      debug:
        msg:
          cockroachdb: "{{ cockroachdb }}"
          haproxy: "{{ haproxy }}"
